import socket
import hashlib
import hmac
from cryptography.fernet import Fernet

#key = b'p7GvOQ_uEvKUPfeWPCeXG7LQyP0LpqMp09qbW7xCxps='
keyf = open("key.bin")
ky = keyf.read()
keyf.close()
#type(ky)
key = bytes(ky[2:46], 'utf-8')
#type(key)
f = Fernet(key)

try:
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    print ("Socket successfully created")
except:
    print ("socket creation failed with error %s" %(err))

# default port for socket
port = 8080
host_ip = socket.gethostbyname(socket.gethostname())
s.connect((host_ip, port))

print("the socket has successfully connected to client")

# receive data from the server and decoding to get the string.
print (f.decrypt(s.recv(1024).decode()).decode('utf-8'))

while True:
    # Reciving messages
    rhsh = s.recv(1024)
    try:
        rmssg = f.decrypt(s.recv(1024).decode())
    except:
        s.close()
        print("Connection Terminated")
        break
    if hmac.new(b'secret-key', rmssg, hashlib.sha512).digest() == rhsh:
        if rmssg.decode('utf-8') == "kickout":
            print("You have been kickedout by the Admin!")
            break
        else:
            print("Server:", rmssg.decode('utf-8'))
    # Sending messages
    mssg = input("Client:")
    if mssg == "close":
        print("Closing connection...")
        # close the connection
        s.send(f.encrypt(mssg.encode()))
        s.close()
        print("Connection Closed")
        break
    hsh = hmac.new(b'secret-key', mssg.encode(), hashlib.sha512).digest()
    s.send(hsh)
    s.send(f.encrypt(mssg.encode()))
       
